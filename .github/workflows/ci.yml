name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test on JDK ${{ matrix.java }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 21, 22 ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v5
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test -B
        
    - name: Upload coverage reports to Codecov
      if: matrix.java == '21'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./target/site/jacoco/jacoco.xml
        fail_ci_if_error: false
        verbose: true

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: 21
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Compile and package
      run: mvn clean compile package -DskipTests=true -B
      
    - name: Generate Javadocs
      run: mvn javadoc:javadoc -B

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [ test, code-quality ]
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: 21
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and package
      run: mvn clean compile package -B
      
    - name: Generate sources and javadocs
      run: mvn source:jar javadoc:jar -B
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: maven-artifacts
        path: |
          target/*.jar
          target/*.pom
        retention-days: 30
        
    # Uncomment and configure when ready to publish to Maven Central
    # - name: Set up Maven Central publishing
    #   if: github.event_name == 'release'
    #   uses: actions/setup-java@v5
    #   with:
    #     java-version: 21
    #     distribution: 'temurin'
    #     server-id: sonatype-oss-release
    #     server-username: MAVEN_USERNAME
    #     server-password: MAVEN_PASSWORD
    #     gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
    #     gpg-passphrase: GPG_PASSPHRASE
        
    # - name: Publish to Maven Central
    #   if: github.event_name == 'release'
    #   env:
    #     MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
    #     MAVEN_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
    #     GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
    #   run: mvn deploy -P sonatype-oss-release -B

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: 21
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run OWASP dependency check
      env:
        NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
      run: |
        if [ -n "$NVD_API_KEY" ]; then
          echo "Using NVD API key for faster updates"
          mvn org.owasp:dependency-check-maven:check -B \
            -DfailBuildOnCVSS=7 \
            -Dformat=ALL \
            -DnvdApiKey="$NVD_API_KEY" \
            || echo "Dependency check completed with warnings"
        else
          echo "Warning: NVD API key not provided - update may take a very long time"
          echo "Consider adding NVD_API_KEY secret for faster dependency checking"
          mvn org.owasp:dependency-check-maven:check -B \
            -DfailBuildOnCVSS=7 \
            -Dformat=ALL \
            || echo "Dependency check completed with warnings"
        fi
        
    - name: Upload OWASP dependency check results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-report
        path: target/dependency-check-report.*
        retention-days: 30

  snyk-security:
    name: Snyk Security Scan (Free Tier)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: 21
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run Snyk to check for vulnerabilities (Free)
      uses: snyk/actions/maven@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        # Free tier settings: public repo gets unlimited scans
        args: --severity-threshold=medium --file=pom.xml
        
    - name: Upload Snyk results to GitHub Code Scanning (Free)
      uses: github/codeql-action/upload-sarif@v4
      if: always() && env.SNYK_TOKEN != ''
      with:
        sarif_file: snyk.sarif

